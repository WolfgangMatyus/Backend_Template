-- 1. Erstelle die Testdatenbank
CREATE DATABASE test_members_db;

-- 2. Verbinde dich mit der Testdatenbank
\c test_members_db;

-- Erstelle die Mitglieder-Tabelle
CREATE TABLE members (
    id SERIAL PRIMARY KEY,
    first_name VARCHAR(100) NOT NULL,
    last_name VARCHAR(100) NOT NULL,
    date_of_birth DATE NOT NULL,
    address VARCHAR(255) NOT NULL,
    email VARCHAR(100) NOT NULL UNIQUE,
    phone VARCHAR(15),
    status VARCHAR(20) DEFAULT 'active', -- Z.B. 'active', 'inactive'
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Trigger-Funktion zur Aktualisierung des updated_at-Feldes
CREATE OR REPLACE FUNCTION update_timestamp()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP; -- Setze updated_at auf die aktuelle Zeit
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger, der die Funktion bei jedem UPDATE aufruft
CREATE TRIGGER update_members_updated_at
BEFORE UPDATE ON members
FOR EACH ROW
EXECUTE FUNCTION update_timestamp();


-- 4. Erstelle die Tabelle für Anwesenheitsdaten
CREATE TABLE attendance_records (
    id SERIAL PRIMARY KEY,
    member_id INT REFERENCES members(id) ON DELETE CASCADE,
    attendance_date DATE NOT NULL,
    status VARCHAR(20) NOT NULL, -- z.B. 'present', 'absent'
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 5. Optional: Erstelle eine Tabelle für archivierte Mitglieder (optional)
CREATE TABLE archived_members (
    id SERIAL PRIMARY KEY,
    first_name VARCHAR(100) NOT NULL,
    last_name VARCHAR(100) NOT NULL,
    date_of_birth DATE NOT NULL,
    address VARCHAR(255) NOT NULL,
    email VARCHAR(100) NOT NULL UNIQUE,
    phone VARCHAR(15),
    status VARCHAR(20) DEFAULT 'inactive',
    archived_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 6. Optional: Erstelle Trigger zur Archivierung von Mitgliedern
CREATE OR REPLACE FUNCTION archive_member() RETURNS TRIGGER AS $$
BEGIN
    INSERT INTO archived_members (first_name, last_name, date_of_birth, address, email, phone, status)
    VALUES (OLD.first_name, OLD.last_name, OLD.date_of_birth, OLD.address, OLD.email, OLD.phone, OLD.status);
    RETURN OLD;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_archive_member
AFTER DELETE ON members
FOR EACH ROW
EXECUTE FUNCTION archive_member();


-- Testdaten für Mitglieder einfügen
INSERT INTO members (first_name, last_name, date_of_birth, address, email, phone)
VALUES
    ('Max', 'Mustermann', '2000-01-01', 'Musterstraße 1', 'max@mustermann.de', '0123456789'),
    ('Erika', 'Musterfrau', '1995-05-12', 'Musterstraße 2', 'erika@musterfrau.de', '0987654321');
