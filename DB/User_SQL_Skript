-- Erweiterung zur Generierung von UUIDs aktivieren (falls noch nicht aktiviert)
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

CREATE TABLE addresses (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),     -- UUID als Primärschlüssel
    street VARCHAR(100) NOT NULL,                       -- Straße
    house_number VARCHAR(10) NOT NULL,                  -- Hausnummer
    stair VARCHAR(10),                                  -- Stiege
    door_number VARCHAR(10),                            -- Türnummer
    postal_code VARCHAR(10) NOT NULL,                   -- Postleitzahl
    city VARCHAR(50) NOT NULL,                          -- Stadt
    country VARCHAR(50) NOT NULL,                       -- Land
    "createdAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,      -- Erstellungsdatum
    "updatedAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP       -- Aktualisierungsdatum
);

CREATE TABLE club_info (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    club_name VARCHAR(100) NOT NULL DEFAULT 'UJC Sakura Yanagi JUDO',
    web_address VARCHAR(100) NOT NULL DEFAULT 'http://www.sakura-yanagi-judo.at',
    email VARCHAR(100) NOT NULL DEFAULT 'office@sakura-yanagi-judo.at',
    phone_trainer VARCHAR(25) NOT NULL DEFAULT '+43 (0) 676 / 775 89 14',
    phone_office VARCHAR(25) NOT NULL DEFAULT '+43 (0) 676 / 461 88 83',
    address_id UUID REFERENCES addresses(id) ON DELETE CASCADE, -- Fremdschlüssel auf die Adressen-Tabelle
    iban VARCHAR(34) NOT NULL DEFAULT 'ATXX XXXX XXXX XXXX XXXX',
    bic VARCHAR(11) NOT NULL DEFAULT 'XXXXATXX',
    logo_path TEXT DEFAULT '/path/to/sakura-yanagi-judo_logo.png'  -- Pfad zum Vereinslogo
);


-- Füge eine Adresse in die addresses-Tabelle ein
INSERT INTO addresses (street, house_number, stair, door_number, postal_code, city, country)
VALUES ('Calvigasse', '4', '1', '26', '1230', 'Wien', 'Österreich');

-- via Postmann die AddressID auslesen für die Verknüpfung mit Vereinsinformationen
-- Füge die Vereinsinformationen hinzu
INSERT INTO club_info (club_name, web_address, email, phone_trainer, phone_office, address_id, iban, bic, logo_path)
VALUES ('UJC Sakura Yanagi JUDO', 'http://www.sakura-yanagi-judo.at', 'office@sakura-yanagi-judo.at', '+43 (0) 676 / 775 89 14', '+43 (0) 676 / 461 88 83', address_id_just_created, 'AT12 3288 0000 0246 9161', 'RLNWATW1880', '/path/to/sakura-yanagi-judo_logo.png');

CREATE TABLE member_roles (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),           			-- UUID als Primärschlüssel
    role VARCHAR(50) DEFAULT 'Judoka',                        			-- Rolle des Mitglieds ('Judoka', 'Trainingsassistent', 'Übungsleiter', 'Trainer', 'Funktionär')
    certification_level VARCHAR(50),                          			-- Ausbildungsgrad (z.B. Trainerlizenz)
    hours_worked DECIMAL(5, 2) DEFAULT 0,                     			-- Geleistete Stunden
    attendance_count INTEGER DEFAULT 0,                       			-- Anzahl der Anwesenheiten
    tax_free_compensation_limit DECIMAL(10, 2) DEFAULT 2400.00,			-- Steuerfreier Maximalbetrag
    additional_allowances DECIMAL(10, 2) DEFAULT 0,           			-- Sachleistungen oder zusätzliche Vergütungen
    budget DECIMAL(10, 2) DEFAULT 0,                          			-- Verfügbares Budget für Aufwandsentschädigung
    "createdAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,          			-- Erstellungsdatum
    "updatedAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP           			-- Aktualisierungsdatum
);

-- Mitglieder Tabelle 
CREATE TABLE members (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),           			-- UUID als Primärschlüssel
    status VARCHAR(20) DEFAULT 'active',					  			-- Status ('active', 'inactive', 'archived', 'offen')
    address_id UUID REFERENCES addresses(id) ON DELETE SET NULL, 		-- Fremdschlüssel auf die Adressen-Tabelle
	member_role_id UUID REFERENCES member_roles(id) ON DELETE SET NULL,	-- Fremdschlüssel auf die Mitglieder-Tabelle
	is_sibling_from UUID REFERENCES members(id) ON DELETE SET NULL,		-- Geschwister Rabatt ab dem 2. Kind	
	member_since DATE NOT NULL DEFAULT CURRENT_DATE,          			-- Mitglied seit (Datum)
    first_name VARCHAR(50) NOT NULL,                          			-- Vorname des Mitglieds
    last_name VARCHAR(50) NOT NULL,                           			-- Nachname des Mitglieds
    date_of_birth DATE NOT NULL,                              			-- Geburtsdatum
    email VARCHAR(100) NOT NULL UNIQUE,                       			-- E-Mail-Adresse (eindeutig)
    phone VARCHAR(20),                                        			-- Telefonnummer
    profile_photo TEXT,                                       			-- Pfad zum Profilfoto
    guardian_contact VARCHAR(100),                            			-- Kontaktinformationen des Erziehungsberechtigten
    guardian_name VARCHAR(100),                               			-- Name des Erziehungsberechtigten			
    "createdAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,          			-- Erstellungsdatum
    "updatedAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP           			-- Aktualisierungsdatum
);

CREATE TABLE judo_specifics (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),            -- Primärschlüssel
    member_id UUID REFERENCES members(id) ON DELETE CASCADE,   -- Fremdschlüssel zur members-Tabelle (1:1 Beziehung)
    jama_id VARCHAR(50),                                       -- JAMA-ID
    nationality VARCHAR(50) NOT NULL,                          -- Nationalität
    gender VARCHAR(20) NOT NULL,                               -- Geschlecht (m/w)
    age_group VARCHAR(20),                                     -- Altersklasse (U8, U10, ...)
    max_fight_time VARCHAR(10),                                -- Maximale Kampfzeit (z.B. 2 min, 3 min, 4 min)
    weight_class VARCHAR(50),                                  -- Gewichtsklasse
    judogi_size NUMERIC(3),                                    -- Judogi Konfektionsgröße
    belt_size NUMERIC(3),                                      -- Gürtellänge
    last_judocard DATE,                                        -- Letzte Judocard (Datum)
    max_training_level VARCHAR(50),                            -- Maximaler Ausbildungsgrad (z.B. 11.KYU weiss, 1.DAN schwarz)
    training_date DATE,                                        -- Ausbildungsdatum
    medical_certificate_date DATE,                             -- Attestdatum
    kyu_book_date DATE,                                        -- Kyuheft am (Datum)
    certificate_status VARCHAR(50),                            -- Urkundenstatus ('ausständig', '')
    "createdAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,           -- Erstellungsdatum
    "updatedAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP            -- Aktualisierungsdatum
);

-- Tabelle contributions erstellen
CREATE TABLE contributions (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),       -- UUID als Primärschlüssel
    member_id UUID REFERENCES members(id),                -- UUID Referenz zu Mitgliedern
    semester VARCHAR(20) NOT NULL,                        -- Semester (z.B. "Sommersemester")
    year INTEGER DEFAULT EXTRACT(YEAR FROM CURRENT_DATE), --  2024
    total_amount DECIMAL(10, 2) NOT NULL,                 -- Gesamter Betrag der Vorschreibung
    due_date DATE NOT NULL,                               -- Fälligkeitsdatum
    status VARCHAR(20) DEFAULT 'pending',                 -- 'pending', 'paid', 'inactive'
    "createdAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,      -- Erstellungsdatum
    "updatedAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP       -- Aktualisierungsdatum
);

-- Trigger-Funktion für contributions
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updatedAt = CURRENT_TIMESTAMP;      -- Setze updatedAt auf die aktuelle Zeit
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger für contributions
CREATE TRIGGER set_updatedAt
BEFORE UPDATE ON contributions
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();

-- Tabelle contribution_items erstellen
CREATE TABLE contribution_items (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),                         -- UUID als Primärschlüssel
    contribution_id UUID REFERENCES contributions(id) ON DELETE CASCADE,    -- Beitrag (Vorschreibung) Referenz
    description VARCHAR(255) NOT NULL,                                      -- Bezeichnung der Posten (z.B. Mitgliedsbeitrag, Kursgebühr)
    quantity INT NOT NULL DEFAULT 1,                                        -- Anzahl der Positionen
    amount DECIMAL(10, 2) NOT NULL,                                         -- Betrag für die jeweilige Position
    "createdAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,                        -- Erstellungsdatum
    "updatedAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP                         -- Aktualisierungsdatum
);

-- Trigger für contribution_items
CREATE TRIGGER set_updatedAt_items
BEFORE UPDATE ON contribution_items
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();

-- Blog Posts Tabelle mit UUID
CREATE TABLE blog_posts (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),     -- UUID als Primärschlüssel
    title VARCHAR(255) NOT NULL,
    description TEXT NOT NULL,
    date DATE NOT NULL,
    location VARCHAR(255),
    images TEXT[],                                      -- Array of image URLs/paths
    "createdAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE events (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),         			            -- Eindeutige ID
    date DATE NOT NULL,                                                             -- Datum des Trainings oder Events
    duration Time,                                     			                    -- 
    type VARCHAR(20) NOT NULL CHECK (type IN ('Training', 'Event', 'Sitzung')),  	-- Typ: 'Training' oder 'Event'
    location VARCHAR(255) NOT NULL,                         			            -- Ort des Trainings oder Events
    organizer VARCHAR(255) NOT NULL,                        			            -- Veranstalter
    description TEXT,                                       			            -- Beschreibung
    costs DECIMAL(10, 2) DEFAULT 0,                         			            -- Kosten (falls Event, Standard 0)
    results TEXT,                                           			            -- Ergebnisse (optional)
    "createdAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,        			            -- Erstellungsdatum
    "updatedAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP         			            -- Aktualisierungsdatum
);

-- Anwesenheitsaufzeichnungen Tabelle mit UUID
CREATE TABLE attendance (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),     				-- UUID als Primärschlüssel
    member_id UUID REFERENCES members(id),              				-- UUID Referenz zu Mitgliedern
    event_id UUID REFERENCES events(id),								-- UUID Referenz zu Events
    is_present BOOLEAN DEFAULT FALSE,                   				-- Boolean-Wert für Anwesenheit (TRUE = anwesend, FALSE = nicht anwesend)
    notes TEXT,															-- Notizen
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Rollen Tabelle mit UUID und Hierarchie
CREATE TABLE roles (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    role_name VARCHAR(50) NOT NULL UNIQUE,
    parent_id UUID REFERENCES roles(id) ON DELETE SET NULL -- Referenz zur übergeordneten Rolle
);

-- Benutzer Tabelle mit UUID
CREATE TABLE users (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),             -- UUID als Primärschlüssel
    member_id UUID REFERENCES members(id) ON DELETE CASCADE,    -- UUID Referenz zu Mitgliedern
    role_id UUID REFERENCES roles(id) ON DELETE SET NULL,       -- UUID Referenz zur Rolle, da Benutzer nur eine Rolle haben kann
    username VARCHAR(100) UNIQUE,
    email VARCHAR(100) NOT NULL UNIQUE,
    password_hash TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Rollen einfügen
INSERT INTO roles (id, role_name, parent_id) VALUES (uuid_generate_v4(), 'user', NULL);
INSERT INTO roles (id, role_name, parent_id) VALUES (uuid_generate_v4(), 'trainer', (SELECT id FROM roles WHERE role_name='user'));
INSERT INTO roles (id, role_name, parent_id) VALUES (uuid_generate_v4(), 'official', (SELECT id FROM roles WHERE role_name='trainer'));
INSERT INTO roles (id, role_name, parent_id) VALUES (uuid_generate_v4(), 'admin', NULL);
