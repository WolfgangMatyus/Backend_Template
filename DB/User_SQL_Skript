-- Erweiterung zur Generierung von UUIDs aktivieren (falls noch nicht aktiviert)
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Mitglieder Tabelle mit UUID als Primärschlüssel
CREATE TABLE members (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),   -- UUID als Primärschlüssel
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    date_of_birth DATE NOT NULL,
    address VARCHAR(255) NOT NULL,
    postal_code VARCHAR(10) NOT NULL,
    city VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL UNIQUE,
    phone VARCHAR(20),
    nationality VARCHAR(50),
    profile_photo TEXT,
    status VARCHAR(20) DEFAULT 'active', -- 'active', 'inactive', 'archived'
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Archivierte Mitglieder Tabelle mit UUID
CREATE TABLE archived_members (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),    -- UUID als Primärschlüssel
    original_member_id UUID,                           -- UUID Referenz zum Originalmitglied
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    date_of_birth DATE,
    address VARCHAR(255),
    postal_code VARCHAR(10),
    city VARCHAR(50),
    email VARCHAR(100),
    phone VARCHAR(20),
    nationality VARCHAR(50),
    profile_photo TEXT,
    archived_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Mitgliederbeiträge Tabelle mit UUID
CREATE TABLE member_contributions (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),    -- UUID als Primärschlüssel
    member_id UUID REFERENCES members(id),             -- UUID Referenz zu Mitgliedern
    amount DECIMAL(10, 2) NOT NULL,
    due_date DATE NOT NULL,
    status VARCHAR(20) DEFAULT 'pending', -- 'pending', 'paid', 'inactive'
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Zuschüsse Tabelle mit UUID
CREATE TABLE grants (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),    -- UUID als Primärschlüssel
    member_id UUID REFERENCES members(id),             -- UUID Referenz zu Mitgliedern
    grant_type VARCHAR(100) NOT NULL,
    amount DECIMAL(10, 2) NOT NULL,
    description TEXT,
    status VARCHAR(20) DEFAULT 'active', -- 'active', 'inactive'
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Blog Posts Tabelle mit UUID
CREATE TABLE blog_posts (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),    -- UUID als Primärschlüssel
    title VARCHAR(255) NOT NULL,
    description TEXT NOT NULL,
    date DATE NOT NULL,
    location VARCHAR(255),
    images TEXT[],                                    -- Array of image URLs/paths
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Anwesenheitsaufzeichnungen Tabelle mit UUID
CREATE TABLE attendance_records (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),    -- UUID als Primärschlüssel
    member_id UUID REFERENCES members(id),             -- UUID Referenz zu Mitgliedern
    date_of_attendance DATE NOT NULL,
    status VARCHAR(20) DEFAULT 'present',  -- 'present', 'absent', 'excused', 'inactive'
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Archivierte Anwesenheitsaufzeichnungen Tabelle mit UUID
CREATE TABLE archived_attendance_records (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),    -- UUID als Primärschlüssel
    original_attendance_id UUID,                       -- UUID Referenz zur Originalanwesensheit
    member_id UUID,                                    -- UUID Referenz zu Mitgliedern
    date_of_attendance DATE,
    original_status VARCHAR(20),
    archived_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Rollen Tabelle mit UUID und Hierarchie
CREATE TABLE roles (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    role_name VARCHAR(50) NOT NULL UNIQUE,
    parent_id UUID REFERENCES roles(id) ON DELETE SET NULL -- Referenz zur übergeordneten Rolle
);

-- Benutzer Tabelle mit UUID
CREATE TABLE users (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),    -- UUID als Primärschlüssel
    member_id UUID REFERENCES members(id) ON DELETE CASCADE, -- UUID Referenz zu Mitgliedern
    email VARCHAR(100) NOT NULL UNIQUE,
    password_hash TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Zwischentabelle für User-Rollen (für flexible Zuweisung von mehreren Rollen an einen User)
CREATE TABLE user_roles (
    user_id UUID REFERENCES users(id) ON DELETE CASCADE,  -- UUID Referenz zu Benutzern
    role_id UUID REFERENCES roles(id) ON DELETE CASCADE,  -- UUID Referenz zu Rollen
    PRIMARY KEY (user_id, role_id)
);

-- Rollen einfügen
INSERT INTO roles (id, role_name, parent_id) VALUES (uuid_generate_v4(), 'user', NULL);
INSERT INTO roles (id, role_name, parent_id) VALUES (uuid_generate_v4(), 'trainer', (SELECT id FROM roles WHERE role_name='user'));
INSERT INTO roles (id, role_name, parent_id) VALUES (uuid_generate_v4(), 'organ', (SELECT id FROM roles WHERE role_name='trainer'));
INSERT INTO roles (id, role_name, parent_id) VALUES (uuid_generate_v4(), 'admin', NULL);


-- Trigger-Funktion zum aktivieren, deaktivieren und archivieren von Mitgliedern und Anwesenheitsdaten

CREATE OR REPLACE FUNCTION handle_member_status_change() RETURNS TRIGGER AS $$
BEGIN
    -- Wenn Mitglied auf 'inactive' gesetzt wird
    IF (OLD.status = 'active' AND NEW.status = 'inactive') THEN
        UPDATE attendance_records
        SET status = 'inactive', updated_at = CURRENT_TIMESTAMP
        WHERE member_id = OLD.id AND status != 'inactive';
    
    -- Wenn Mitglied wieder 'active' wird
    ELSIF (OLD.status = 'inactive' AND NEW.status = 'active') THEN
        UPDATE attendance_records
        SET status = 'active', updated_at = CURRENT_TIMESTAMP
        WHERE member_id = OLD.id AND status != 'active';
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger für das Archivieren

CREATE TRIGGER member_status_update
BEFORE UPDATE OF status ON members
FOR EACH ROW
WHEN (OLD.status = 'active' AND NEW.status = 'inactive')
EXECUTE FUNCTION handle_member_status_change();
